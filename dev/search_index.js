var documenterSearchIndex = {"docs":
[{"location":"#HypercubeTransform","page":"Home","title":"HypercubeTransform","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for HypercubeTransform.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#HypercubeTransform.DeltaDist","page":"Home","title":"HypercubeTransform.DeltaDist","text":"DeltaDist(x0)\n\nCreates a Delta (aka Dirac Delta) distribution centered at the point x0. This distribution is typically used to represent a fixed value in the parameter space and is often used in Bayesian inference to represent a parameter that is known with certainty.\n\nWarning\n\nThe logpdf always returns zero. This is because its purpose is to represent a fixed value in  the parameter space, and thus we do not want it to directly compute to the probability density of the posterior. \n\nExample\n\njulia> d = DeltaDist(5.0)\njulia> rand(d) == 5.0\ntrue\njulia> logpdf(d, 0.0)\n0.0\n\n\n\n\n\n","category":"type"},{"location":"#HypercubeTransform.NamedDist-Union{Tuple{NamedTuple{N}}, Tuple{N}} where N","page":"Home","title":"HypercubeTransform.NamedDist","text":"NamedDist(d::NamedTuple{N})\nNamedDist(;dists...)\n\nA Distribution with names N. This is useful to construct a set of random variables with a set of names attached to them.\n\njulia> d = NamedDist((a=Normal(), b = Uniform(), c = MvNormal(randn(2), rand(2))))\njulia> x = rand(d)\n(a = 0.13789342, b = 0.2347895, c = [2.023984392, -3.09023840923])\njulia> logpdf(d, x)\n\nNote that NamedDist values passed to NamedDist can also be abstract collections of distributions as well\n\njulia> d = NamedDist(a = Normal(),\n                     b = MvNormal(ones(2)),\n                     c = (Uniform(), InverseGamma())\n                     d = (a = Normal(), Beta)\n                    )\n\nHow this is done internally is considered an implementation detail and is not part of the public interface.\n\n\n\n\n\n","category":"method"},{"location":"#HypercubeTransform.TupleDist","page":"Home","title":"HypercubeTransform.TupleDist","text":"TupleDist(d::NTuple{N, <:Distribution})\n\nCreates a multivariate distribution whose backing is a tuple. This is useful for small inhomogenous distributions, i.e. where each element of the tuple is a different distribution.\n\n\n\n\n\n","category":"type"},{"location":"#HypercubeTransform.ascube","page":"Home","title":"HypercubeTransform.ascube","text":"`ascube(c)\n\nConstructs the object that contains the necessary information to move from the unit hypercube to the distribution space. This is the usual function to use when construct the transformation.\n\nThere are a few different behaviors depending on the type of the object.\n\nIf c::Distribution then this will store the distributions.\nIf c::Tuple{AbstractHypercubeTransform} then this will store the tuple\n\nExamples\n\nascube(Normal())\nascube(MultivariateNormal())\nascube((Normal(), Normal(2.0)))\nascube( (α = Uniform(), β = Normal()) )\n\n\n\n\n\n","category":"function"},{"location":"#HypercubeTransform.asflat","page":"Home","title":"HypercubeTransform.asflat","text":"asflat(d::Distribution)\n\nComputes the transformation of the support of the distribution d such that the variables live on ℝⁿ where n is the dimension of the problem. This is essentially what Turing and Stan do when reparameterizing the model.\n\nThe returned object is a TransformVariables.AbstractTransform object and follows that interface. Please see the TransformVariable docs for more information.\n\n\n\n\n\n","category":"function"},{"location":"#HypercubeTransform.transform_tuple-Tuple{NTuple{N, HypercubeTransform.AbstractHypercubeTransform} where N, Any, Any}","page":"Home","title":"HypercubeTransform.transform_tuple","text":"transform_tuple(tt, x, index)\n\n\nHelper function that steps through the transformation tuple\n\n\n\n\n\n","category":"method"},{"location":"#TransformVariables.inverse-Tuple{HypercubeTransform.AbstractHypercubeTransform, Any}","page":"Home","title":"TransformVariables.inverse","text":"`inverse(c::AbstractHypercubeTransform, p)`\n\nTransforms from the parameter space p, to the unit hypercube defined by the transformation c.\n\nThe behavior of this function depends on the nature of c.\n\nIf c is a <: Distributions.Distributions and has a cdf method\n\nthis will just call the cdf function. If no cdf function is defined then a custom transformation depending on the type of c will be called. If no custom transformation exists then an error will be raised.\n\nIf c is a Tuple of transformations then inverse will iterate through the\n\ntuple using a similar method to the  TransformVariables.jl method.\n\n\n\n\n\n","category":"method"},{"location":"#TransformVariables.transform-Tuple{HypercubeTransform.AbstractHypercubeTransform, Any}","page":"Home","title":"TransformVariables.transform","text":"transform(c::AbstractHypercubeTransform, p)\n\nTransforms from the hypercube with coordinates p, to the parameter space defined by the transformation c.\n\nThe behavior of this function depends on the nature of c.\n\nIf c is a <: Distributions.Distributions and has a quantile method\n\nthis will just call the quantile function. If no quantile function is defined then a custom transformation depending on the type of c will be called. If no custom transformation exists then an error will be raised.\n\nIf c is a Tuple of transformations then transform will iterate through the\n\ntuple using a similar method to the  TransformVariables.jl method.\n\n\n\n\n\n","category":"method"}]
}
